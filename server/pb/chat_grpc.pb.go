// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatManagerClient is the client API for ChatManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatManagerClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatManager_ChatClient, error)
}

type chatManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewChatManagerClient(cc grpc.ClientConnInterface) ChatManagerClient {
	return &chatManagerClient{cc}
}

func (c *chatManagerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatManager_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatManager_ServiceDesc.Streams[0], "/chat.ChatManager/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatManagerChatClient{stream}
	return x, nil
}

type ChatManager_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatManagerChatClient struct {
	grpc.ClientStream
}

func (x *chatManagerChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatManagerChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatManagerServer is the server API for ChatManager service.
// All implementations must embed UnimplementedChatManagerServer
// for forward compatibility
type ChatManagerServer interface {
	Chat(ChatManager_ChatServer) error
	mustEmbedUnimplementedChatManagerServer()
}

// UnimplementedChatManagerServer must be embedded to have forward compatible implementations.
type UnimplementedChatManagerServer struct {
}

func (UnimplementedChatManagerServer) Chat(ChatManager_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatManagerServer) mustEmbedUnimplementedChatManagerServer() {}

// UnsafeChatManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatManagerServer will
// result in compilation errors.
type UnsafeChatManagerServer interface {
	mustEmbedUnimplementedChatManagerServer()
}

func RegisterChatManagerServer(s grpc.ServiceRegistrar, srv ChatManagerServer) {
	s.RegisterService(&ChatManager_ServiceDesc, srv)
}

func _ChatManager_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatManagerServer).Chat(&chatManagerChatServer{stream})
}

type ChatManager_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatManagerChatServer struct {
	grpc.ServerStream
}

func (x *chatManagerChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatManagerChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatManager_ServiceDesc is the grpc.ServiceDesc for ChatManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatManager",
	HandlerType: (*ChatManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatManager_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
